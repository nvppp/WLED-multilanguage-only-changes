<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
	<title class="l-pwwq">WiFi Settings</title>
	<script type="module">import {changeLang} from "/language.js";changeLang();</script>
	<script type="module" async>
		import {langArr, lL} from "/language.js";
		let lA=langArr;

		var d = document;
		var loc = false, locip, locproto = "http:";
		var scanLoops = 0, preScanSSID = "";
		function gId(e) { return d.getElementById(e); }
		function cE(e) { return d.createElement(e); }
		function H(){window.open("https://kno.wled.ge/features/settings/#wifi-settings");}
		function B(){window.open(getURL("/settings"),"_self");}
		function N() {
			const button = gId("scan");
			button.disabled = true;
			button.textContent = lA["pzwq"][lL];

			fetch(getURL("/json/net")).then((response) => {
				return response.json();
			}).then((json) => {
				// Get the list of networks only, defaulting to an empty array.
				return Object.assign(
					{},
					{"networks": []},
					json,
				).networks.sort(
					// Sort by signal strength, descending.
					(a, b) => b.rssi - a.rssi
				).reduce(
					// Filter out duplicate SSIDs. Since it is sorted by signal
					// strength, the strongest signal will be kept in the
					// order it as originally appeared in the array.
					(unique, other) => {
						if(!unique.some(obj => obj.ssid === other.ssid)) {
							unique.push(other);
						}
						return unique;
					},
					[],
				);
			}).then((networks) => {
				// If there are no networks, fetch it again in a second.
				// but only do this a few times.
				if (networks.length === 0 && scanLoops < 10) {
					scanLoops++;
					setTimeout(N, 1000);
					return;
				}
				scanLoops = 0;

				let cs = gId("CS");
				if (cs) {
					let select = cE("select");
					select.setAttribute("id", "CS");
					select.setAttribute("name", "CS");
					select.setAttribute("onchange", "T()");
					preScanSSID = cs.value;

					for (let i = 0; i < select.children.length; i++) {
						select.removeChild(select.children[i]);
					}

					for (let i = 0; i < networks.length; i++) {
						const option = cE("option");

						option.setAttribute("value", networks[i].ssid);
						option.textContent = `${networks[i].ssid} (${networks[i].rssi} dBm)`;

						if (networks[i].ssid === cs.value) {
							option.setAttribute("selected", "selected");
						}

						select.appendChild(option);
					}
					const option = cE("option");

					option.setAttribute("value", "!Cs");
					option.textContent = lA["pzww"][lL];
					select.appendChild(option);

					cs.replaceWith(select);
				}

				button.disabled = false;
				button.textContent = lA["pzwe"][lL];
			});
		}
		// replace WiFi select with custom SSID input field again
		function T() {
			let cs = gId("CS");
			if (!cs || cs.value != "!Cs") return;
			let input = cE("input");
			input.type = "text";
			input.id = "CS";
			input.name ="CS";
			input.setAttribute("maxlength",32);
			input.value = preScanSSID;
			cs.replaceWith(input);
		}
		// https://www.educative.io/edpresso/how-to-dynamically-load-a-js-file-in-javascript
		function loadJS(FILE_URL, async = true) {
			let scE = cE("script");
			scE.setAttribute("src", FILE_URL);
			scE.setAttribute("type", "text/javascript");
			scE.setAttribute("async", async);
			d.body.appendChild(scE);
			// success event
			scE.addEventListener("load", () => {
				//console.log("File loaded");
				GetV();
			});
			// error event
			scE.addEventListener("error", (ev) => {
				console.log(lA["pzq"][lL], ev);
				alert(lA["pzw"][lL]);
			});
		}
		function S() {
			let l = window.location;
			if (l.protocol == "file:") {
				loc = true;
				locip = localStorage.getItem('locIp');
				if (!locip) {
					locip = prompt(lA["pze"][lL]);
					localStorage.setItem('locIp', locip);
				}
			} else {
				// detect reverse proxy
				let path = l.pathname;
				let paths = path.slice(1,path.endsWith('/')?-1:undefined).split("/");
				if (paths.length > 2) {
					locproto = l.protocol;
					loc = true;
					locip = l.hostname + (l.port ? ":" + l.port : "") + "/" + paths[0];
				}
			}
			loadJS(getURL('/settings/s.js?p=1'), false);	// If we set async false, file is loaded and executed, then next statement is processed
			if (loc) d.Sf.action = getURL('/settings/wifi');
		}
		function getURL(path) {
			return (loc ? locproto + "//" + locip : "") + path;
		}
		window.gId = gId;
		window.cE = cE;
		window.H = H;
		window.B = B;
		window.N = N;
		window.T = T;
		window.loadJS = loadJS;
		window.S = S;
		window.getURL = getURL;
	</script>
	<style>@import url("style.css");</style>
</head>
<body class="l_body" onload="S()">
	<form id="form_s" name="Sf" method="post">
		<div class="toprow">
			<div class="helpB"><button type="button" onclick="H()">?</button></div>
			<button class="l-plb" type="button" onclick="B()"><!--Back--></button><button class="l-pld" type="submit"><!--Save & Connect--></button><hr>
		</div>
		<h2 class="l-pwww"><!--WiFi setup--></h2>
		<h3 class="l-pwwe"><!--Connect to existing network--></h3>
		<button class="l-pzwe" type="button" id="scan" onclick="N()"><!--Scan--></button><br>
		<span class="l-pwwr"><!--Network name (SSID, empty to not connect):--></span><br>
		<input type="text" id="CS" name="CS" maxlength="32"><br>
		<span class="l-pwwt"><!--Network password:--></span> <br> <input type="password" name="CP" maxlength="63"><br>
		<span class="l-pwwy"><!--Static IP (leave at 0.0.0.0 for DHCP):--></span><br>
		<input name="I0" type="number" class="s" min="0" max="255" required> .
		<input name="I1" type="number" class="s" min="0" max="255" required> .
		<input name="I2" type="number" class="s" min="0" max="255" required> .
		<input name="I3" type="number" class="s" min="0" max="255" required><br>
		<span class="l-pwwu"><!--Static gateway:--></span><br>
		<input name="G0" type="number" class="s" min="0" max="255" required> .
		<input name="G1" type="number" class="s" min="0" max="255" required> .
		<input name="G2" type="number" class="s" min="0" max="255" required> .
		<input name="G3" type="number" class="s" min="0" max="255" required><br>
		<span class="l-pwwi"><!--Static subnet mask:--></span><br>
		<input name="S0" type="number" class="s" min="0" max="255" required> .
		<input name="S1" type="number" class="s" min="0" max="255" required> .
		<input name="S2" type="number" class="s" min="0" max="255" required> .
		<input name="S3" type="number" class="s" min="0" max="255" required><br>
		<span class="l-pwwo"><!--mDNS address (leave empty for no mDNS):--></span><br>
		http:// <input type="text" name="CM" maxlength="32"> .local<br>
		<span class="l-pwwp"><!--Client IP:--></span> <span class="sip"> <span class="l-pwwa"><!--Not connected--></span> </span> <br>
		<h3 class="l-pwws"><!--Configure Access Point--></h3>
		<span class="l-pwwd"><!--AP SSID (leave empty for no AP):--></span><br> <input type="text" name="AS" maxlength="32"><br>
		<span class="l-pwwf"><!--Hide AP name:--></span> <input type="checkbox" name="AH"><br>
		<span class="l-pwwg"><!--AP password (leave empty for open):--></span><br> <input type="password" name="AP" maxlength="63" pattern="(.{8,63})|()" title="Empty or min. 8 characters"><br>
		<span class="l-pwwh"><!--Access Point WiFi channel:--></span> <input name="AC" type="number" class="xs" min="1" max="13" required><br>
		<span class="l-pwwj"><!--AP opens:--></span>
		<select name="AB">
			<option value="0" class="l-pwwk"><!--No connection after boot--></option>
			<option value="1" class="l-pwwl"><!--Disconnected--></option>
			<option value="2" class="l-pwwz"><!--Always--></option>
			<option value="3" class="l-pwwx"><!--Never (not recommended)--></option></select><br>
		<span class="l-pwwc"><!--AP IP:--></span> <span class="sip"> <span class="l-pwwv">Not active</span> </span><br>
		<h3 class="l-pwwb"><!--Experimental--></h3>
		<span class="l-pwwn"><!--Force 802.11g mode (ESP8266 only):--></span> <input type="checkbox" name="FG"><br>
		<span class="l-pwwm"><!--Disable WiFi sleep:--></span> <input type="checkbox" name="WS"><br>
		<i class="l-pwkq"><!--Can help with connectivity issues.<br>Do not enable if WiFi is working correctly, increases power consumption.--></i>
		<div id="remd">
			<h3 class="l-pwkw"><!--Wireless Remote--></h3>
			<i class="l-pwke"><!--Listen for events over ESP-NOW<br>Keep disabled if not using a remote, increases power consumption.<br>--></i>
			<span class="l-pwkr"><!--Enable Remote:--></span> <input type="checkbox" name="RE"><br>
			<span class="l-pwkt"><!--Hardware MAC:--></span> <input type="text" name="RMAC"><br>
			<span class="l-pwky"><!--Last Seen:--></span> <span class="rlid l-zkv">None</span> <br>
		</div>
		<div id="ethd">
			<h3 class="l-pwku"><!--Ethernet Type--></h3>
			<select name="ETH">
				<option value="0" class="l-zkv"><!--None--></option>
				<option value="9">ABC! WLED V43 & compatible</option>
				<option value="2">ESP32-POE</option>
				<option value="6">ESP32Deux</option>
				<option value="7">KIT-VE</option>
				<option value="8">QuinLED-Dig-Octa & T-ETH-POE</option>
				<option value="4">QuinLED-ESP32</option>
				<option value="10">Serg74-ETH32</option>
				<option value="5">TwilightLord-ESP32</option>
				<option value="3">WESP32</option>
				<option value="1">WT32-ETH01</option>
			</select><br><br>
		</div>
		<hr>
		<button class="l-plb" type="button" onclick="B()"><!--Back--></button><button class="l-pld" type="submit"><!--Save & Connect--><!-- Autoreplaced from language.js --></button>
	</form>
</body>
</html>